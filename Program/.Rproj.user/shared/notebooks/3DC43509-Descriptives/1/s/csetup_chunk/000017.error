{"frames":[{"func":"readxl::read_xlsx(\"../data/HR BEHAV database for Faith.xlsx\", \n    sheet = \"data\") %>% filter(timepoint == 2 | timepoint == \n    3 | timepoint == 4) %>% mutate(group = case_when(stimulus == \n    1 ~ \"Group A\", stimulus == 2 ~ \"Group B\"), approach_corrected = if_else(Approach_lat >  ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"as.data.frame(.)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mutate(., group = case_when(stimulus == 1 ~ \"Group A\", stimulus == \n    2 ~ \"Group B\"), approach_corrected = if_else(Approach_lat > \n    Visible ~ Visible, Approach_lat), pct_latency = 100 * Approach_lat/Visible)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mutate.data.frame(., group = case_when(stimulus == 1 ~ \"Group A\", \n    stimulus == 2 ~ \"Group B\"), approach_corrected = if_else(Approach_lat > \n    Visible ~ Visible, Approach_lat), pct_latency = 100 * Approach_lat/Visible)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mutate_cols(.data, ..., caller_env = caller_env())","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"withCallingHandlers({\n    for (i in seq_along(dots)) {\n        mask$across_cache_reset()\n        context_poke(\"column\", old_current_column) ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"mask$eval_all_mutate(quo)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"if_else(Approach_lat > Visible ~ Visible, Approach_lat)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"bad_args(\"condition\", \"must be a logical vector, not {friendly_type_of(condition)}.\")","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"glubort(fmt_args(args), ..., .envir = .envir)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":".abort(text)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"signal_abort(cnd)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"signalCondition(cnd)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"(function (e) \n{\n    local_call_step(dots = dots, .index = i, .fn = \"mutate\", \n        .dot_data = inherits(e, \"rlang_error_data_pronoun_not_found\")) ...","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"abort(bullets, class = c(\"dplyr:::mutate_error\", \"dplyr_error\"), \n    error_name = error_name, error_expression = error_expression, \n    parent = e, bullets = bullets)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"signal_abort(cnd)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0},{"func":"stop(fallback)","file":"","line_number":0,"end_line_number":0,"character_number":0,"end_character_number":0}],"message":"Error: Problem with `mutate()` column `approach_corrected`.\n\u001B[34mi\u001B[39m `approach_corrected = if_else(Approach_lat > Visible ~ Visible, Approach_lat)`.\n\u001B[31mx\u001B[39m `condition` must be a logical vector, not a `formula` object.\n\u001B[90mRun `rlang::last_error()` to see where the error occurred.\u001B[39m\n"}